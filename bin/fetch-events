#!/usr/bin/env ruby

require 'optparse'

$options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: fetch-events [$options]"
  opts.on("-S", "--since DATE", "Fetch events modified since YYYY-DD-MM") do |s|
    $options[:since] = s
  end
  opts.on("-D", "--[no-]dry-run", "Dry run (don't update DB)") do |d|
    $options[:dryrun] = d
  end
  opts.on("-X", "--destroy-all", "Destroy all previous events") do |x|
    $options[:destroyall] = x
  end
  opts.on("-V", "--[no-]verbose", "Run verbosely") do |v|
    $options[:verbose] = v
  end
  opts.on_tail("-H", "--helpme", "Display command-line $options") do
    puts opts
    exit
  end
end.parse!

modified_since = $options[:since] ? Date.parse($options[:since]) : 1.week.ago.to_date
$stderr.puts "fetching events modified since #{modified_since}" if $options[:verbose]
xml = EventFetcher.event_profiles(modified_since)
if $options[:destroyall]
  Event.destroy_all unless $options[:dryrun]
end
Event.from_xml(xml).each do |event|
  old_event = Event.find_by_origin_ident(event.origin_ident)
  if !event.setupable?
    if old_event
      $stderr.puts "REMOVE id=#{old_event.id} origin_ident=#{event.origin_ident} name=[#{event.name}]" if $options[:verbose]
      old_event.destroy! unless $options[:dryrun]
    else
      $stderr.puts "(ignore) origin_ident=#{event.origin_ident} name=[#{event.name}]" if $options[:verbose]
    end
  elsif old_event
    $stderr.puts "UPDATE id=#{old_event.id} origin_ident=#{event.origin_ident} name=[#{event.name}]" if $options[:verbose]
    old_event.set_from(event)
    old_event.save! unless $options[:dryrun]
  else
    $stderr.puts "NEW origin_ident=#{event.origin_ident} name=[#{event.name}]" if $options[:verbose]
    event.save! unless $options[:dryrun]
  end
end
